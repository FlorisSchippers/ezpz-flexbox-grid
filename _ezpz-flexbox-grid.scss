/* ==========================================================================
   EZPZ FLEXBOX GRID by Sven Sigmond - (VI Company) http://vicompany.nl
   ========================================================================== */

/* Setup - Values may be edited - !!!DO NOT REMOVE THESE VARIABLES!!!
   ========================================================================== */
$ezpz-namespace:				'grid' !default;
$ezpz-grid-type:				'columns' !default;  // 'columns' or 'fractions'
$ezpz-gutter: 					1rem !default;

// Only used when $ezpz-grid-type is set to 'columns'
$ezpz-columns: 					12 !default;

// Only used when $ezpz-grid-type is set to 'fractions'
$ezpz-fractions:				(1:2),
								(1:3),
								(2:3),
								(1:4),
								(3:4) !default;

// Breakpoints
// Please note that adding more breakpoints adds quite a lot of extra css depending on the optional features
$ezpz-breakpoints: 				(
									'tiny':		25rem,
									'small':	37.5rem,
									'medium':	60rem,
									'large':	90rem
								) !default;

// Optional grid features - Set to true to enable
$ezpz-grid-align:				false !default;
$ezpz-grid-wrap:				false !default;
$ezpz-cell-order:				false !default;
$ezpz-cell-offset:				false !default;
$ezpz-cell-align:				false !default;
$ezpz-gutter-collapse:			false !default;


/* Grid generator - !!!DO NOT EDIT OR REMOVE ANTHING BELOW THIS LINE!!!
   ========================================================================== */

/* Basic grid behaviour
   ========================================================================== */

.#{$ezpz-namespace} {
	flex-direction: row;
	box-sizing: border-box;
	display: flex;

	margin-right: -($ezpz-gutter / 2);
	margin-left: -($ezpz-gutter / 2);

	> .cell {
		// Not using flex shorthand because IE 10/11 ignore shorthand declarations with a unitless flex-basis value
		// https://github.com/philipwalton/flexbugs#4-flex-shorthand-declarations-with-unitless-flex-basis-values-are-ignored
		flex-basis: 0%;
		flex-direction: column;
		flex-grow: 1;
		flex-shrink: 1;

		box-sizing: border-box;

		// Child items of a grid section also have display flex to allow same-height (stretched) modules within multiple cells
		display: flex;

		padding: 0 ($ezpz-gutter / 2);

		> * {
			// All direct child elements within a cell try to use up the maximum (and same) amount of available space
			flex-grow: 1;
			min-width: 100%;
		}
	}
}


// Cells are layed out vertically
.#{$ezpz-namespace}--vertical {
	flex-direction: column;

	// IE 10/11 Fix to prevent cells from not having a height in a vertical grid layout
	> .cell {
		flex-basis: auto;
	}
}


// Create aditional classes for breakpoints
@each $breakpoint, $size in $ezpz-breakpoints {
	@media (min-width: $size) {
		.#{$ezpz-namespace}--#{$breakpoint}-horizontal {
			flex-direction: row;
		}

		.#{$ezpz-namespace}--#{$breakpoint}-vertical {
			flex-direction: column;

			// IE Fix to prevent cells from not having a height in a vertical grid layout
			> .cell {
				flex-basis: auto;
			}
		}
	}
}


/* Nested grid sections
   ========================================================================== */
.#{$ezpz-namespace} {
	> .cell {
		.#{$ezpz-namespace} {
			margin: 0 (-$ezpz-gutter / 2);
		}
	}
}


/* Alignment of all cells within a grid section
   ========================================================================== */
@if $ezpz-grid-align {
	.#{$ezpz-namespace}--align-start {
		align-items: flex-start;
	}

	.#{$ezpz-namespace}--align-end {
		align-items: flex-end;
	}

	.#{$ezpz-namespace}--align-center {
		align-items: center;
	}

	.#{$ezpz-namespace}--align-stretch {
		align-items: stretch;
	}

	// Create aditional classes for breakpoints
	@each $breakpoint, $size in $ezpz-breakpoints {
		@media (min-width: $size) {
			.#{$ezpz-namespace}--#{$breakpoint}-align-start {
				align-items: flex-start;
			}

			.#{$ezpz-namespace}--#{$breakpoint}-align-end {
				align-items: flex-end;
			}

			.#{$ezpz-namespace}--#{$breakpoint}-align-center {
				align-items: center;
			}

			.#{$ezpz-namespace}--#{$breakpoint}-align-stretch {
				align-items: stretch;
			}
		}
	}
}


/* Grid where none of the cells have gutters
   ========================================================================== */
@if $ezpz-gutter-collapse {
	.#{$ezpz-namespace}--collapsed {
		> .cell {
			padding: 0;
		}
	}

	@each $breakpoint, $size in $ezpz-breakpoints {
		@media (min-width: $size) {
			.#{$ezpz-namespace}--#{$breakpoint}-collapsed {
				> .cell {
					padding: 0;
				}
			}

			.#{$ezpz-namespace}--#{$breakpoint}-expanded {
				> .cell {
					padding: 0 ($ezpz-gutter / 2);
				}
			}
		}
	}
}


/* Specific cell without gutters
   ========================================================================== */
@if $ezpz-gutter-collapse {
	.#{$ezpz-namespace} {
		> .cell--collapsed {
			padding: 0;
		}

		@each $breakpoint, $size in $ezpz-breakpoints {
			@media (min-width: $size) {
				> .cell--#{$breakpoint}-collapsed {
					padding: 0;
				}

				> .cell--#{$breakpoint}-expanded {
					padding: 0 ($ezpz-gutter / 2);
				}
			}
		}
	}
}


/* Grid section with automatically wrapping cells
   ========================================================================== */
@if $ezpz-grid-wrap {
	.#{$ezpz-namespace}--wrap {
		flex-wrap: wrap;

		> .cell {
			flex-basis: auto;
		}
	}

	.#{$ezpz-namespace}--wrap-reverse {
		flex-wrap: wrap-reverse;

		> .cell {
			flex-basis: auto;
		}
	}
}


/* Cell sizing
   ========================================================================== */
.#{$ezpz-namespace} {
	// Generate the cell size classes for a column based grid
	@if($ezpz-grid-type == 'columns') {
		@for $i from 1 through $ezpz-columns {
			> .cell--#{$i} {
				flex: 0 0 auto;
				width: (100% / $ezpz-columns) * $i;
			}
		}

		// Create aditional classes for breakpoints
		@each $breakpoint, $size in $ezpz-breakpoints {
			@media (min-width: $size) {
				@for $i from 1 through $ezpz-columns {
					> .cell--#{$breakpoint}-#{$i} {
						flex: 0 0 auto;
						width: (100% / $ezpz-columns) * $i;
					}
				}
			}
		}
	}
	// Generate the cell size classes for a fraction based grid
	@else if($ezpz-grid-type == 'fractions') {
		> .cell--1 {
			flex: 0 0 auto;
			width: 100%;
		}

		@each $fraction in $ezpz-fractions {
			@each $key, $val in $fraction {
				$class-name: $key + '\\/' + $val;

				> .cell--#{$class-name} {
					flex: 0 0 auto;
					width: percentage($key / $val);
				}
			}
		}

		// Create aditional classes for breakpoints
		@each $breakpoint, $size in $ezpz-breakpoints {
			@media (min-width: $size) {
				@each $fraction in $ezpz-fractions {
					@each $key, $val in $fraction {
						$class-name: $key + '\\/' + $val;

						> .cell--#{$breakpoint}-1 {
							flex: 0 0 auto;
							width: 100%;
						}

						> .cell--#{$breakpoint}-#{$class-name} {
							flex: 0 0 auto;
							width: percentage($key / $val);
						}
					}
				}
			}
		}
	}
	// Throw error when no, or an invalid grid type has been set.
	@else {
		@error 'Make sure to set $ezpz-grid-type to "columns" or "fractions"';
	}
}


/* Cell order (order is 0 by default)
   ========================================================================== */
@mixin create-cell-order-classes($cell-amount) {
	.#{$ezpz-namespace} {
		// Useful for pulling a single column to the front of the row
		> .cell--order-start {
			order: -1;
		}

		// Useful for pushing a single column to the end of the row
		> .cell--order-end {
			order: $cell-amount;
		}

		// Create offset classes used to control cell order
		@for $i from 1 through $cell-amount {
			> .cell--order-#{$i} {
				order: $i - 1;
			}
		}

		@each $breakpoint, $size in $ezpz-breakpoints {
			@media (min-width: $size) {
				> .cell--#{$breakpoint}-order-start {
					order: -1;
				}

				> .cell--#{$breakpoint}-order-end {
					order: $cell-amount;
				}

				@for $i from 1 through $cell-amount {
					> .cell--#{$breakpoint}-order-#{$i} {
						order: $i - 1;
					}
				}
			}
		}
	}
}

// Check if cell order has been enabled by the user
@if $ezpz-cell-order {
	// Generate the order classes for a column based grid
	@if($ezpz-grid-type == 'columns') {
		@include create-cell-order-classes($ezpz-columns);
	}
	// Generate the order classes for a fraction based grid
	@else if($ezpz-grid-type == 'fractions') {
		@include create-cell-order-classes(
			length($ezpz-fractions)
		);
	}
	// Throw error when no, or an invalid grid type has been set.
	@else {
		@error 'Make sure to set $ezpz-grid-type to "columns" or "fractions"';
	}
}


/* Cell positioning through offset
   ========================================================================== */
@if $ezpz-cell-offset {
	.#{$ezpz-namespace} {
		// Generate the offset classes for a column based grid
		@if($ezpz-grid-type == 'columns') {
			// Create basic offset classes
			// Used to offset individual cells
			@for $i from 0 through $ezpz-columns {
				> .cell--offset-#{$i} {
					margin-left: (100% / $ezpz-columns) * $i;
				}
			}

			// Create aditional classes for breakpoints
			@each $breakpoint, $size in $ezpz-breakpoints {
				@media (min-width: $size) {
					@for $i from 0 through $ezpz-columns {
						> .cell--#{$breakpoint}-offset-#{$i} {
							margin-left: (100% / $ezpz-columns) * $i;
						}
					}
				}
			}
		}
		// Generate the offset classes for a fraction based grid
		@else if($ezpz-grid-type == 'fractions') {
			.cell--offset-0 {
				margin-left: 0;
			}

			.cell--offset-1 {
				margin-left: 100%;
			}

			@each $fraction in $ezpz-fractions {
				@each $key, $val in $fraction {
					$class-name: $key + '\\/' + $val;

					> .cell--offset-#{$class-name} {
						margin-left: percentage($key / $val);
					}
				}
			}

			// Create aditional classes for breakpoints
			@each $breakpoint, $size in $ezpz-breakpoints {
				@media (min-width: $size) {
					.cell--#{$breakpoint}-offset-0 {
						margin-left: 0;
					}

					.cell--#{$breakpoint}-offset-1 {
						margin-left: 100%;
					}

					@each $fraction in $ezpz-fractions {
						@each $key, $val in $fraction {
							$class-name: $key + '\\/' + $val;

							> .cell--#{$breakpoint}-offset-#{$class-name} {
								margin-left: percentage($key / $val);
							}
						}
					}
				}
			}
		}
		// Throw error when no, or an invalid grid type has been set.
		@else {
			@error 'Make sure to set $ezpz-grid-type to "columns" or "fractions"';
		}
	}
}


/* Alignment of individual cells
   ========================================================================== */
@if $ezpz-cell-align {
	.#{$ezpz-namespace} {
		> .cell--align-start {
			align-self: flex-start;
		}

		> .cell--align-end {
			align-self: flex-end;
		}

		> .cell--align-center {
			align-self: center;
		}

		// Create aditional classes for breakpoints
		@each $breakpoint, $size in $ezpz-breakpoints {
			@media (min-width: $size) {
				> .cell--#{$breakpoint}-align-start {
					align-self: flex-start;
				}

				> .cell--#{$breakpoint}-align-end {
					align-self: flex-end;
				}

				> .cell--#{$breakpoint}-align-center {
					align-self: center;
				}

				> .cell--#{$breakpoint}-align-stretch {
					align-self: stretch;
				}
			}
		}
	}
}
