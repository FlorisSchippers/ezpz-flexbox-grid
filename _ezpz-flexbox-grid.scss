// ========================================================================== //
// EZPZ FLEXBOX GRID by Sven Sigmond - (VI Company) http://vicompany.nl
// ========================================================================== //

// Setup - Values may be edited - !!!DO NOT REMOVE THESE VARIABLES!!!
// ========================================================================== //
$ezpz-namespace:				'.grid' !default;
$ezpz-grid-type:				'fractions' !default;  // 'columns' or 'fractions'
$ezpz-gutter: 					1rem !default;

// Only used when $ezpz-grid-type is set to 'columns'
$ezpz-columns: 					12 !default;

// Only used when $ezpz-grid-type is set to 'fractions'
$ezpz-fractions:				(1:2),
								(1:3),
								(2:3),
								(1:4),
								(3:4) !default;

// Breakpoints
// Please note that adding more breakpoints adds quite a lot of extra css depending on the optional features
$ezpz-breakpoints: 				(
									'tiny':		25rem,
									'small':	37.5rem,
									'medium':	60rem,
									'large':	90rem
								) !default;

// Optional grid features - Set to true to enable
$ezpz-grid-align:				false !default;
$ezpz-grid-wrap:				false !default;
$ezpz-cell-order:				false !default;
$ezpz-cell-offset:				false !default;
$ezpz-cell-align:				false !default;
$ezpz-gutter-collapse:			false !default;


// Grid generator - !!!DO NOT EDIT OR REMOVE ANTHING BELOW THIS LINE!!!
// ==========================================================================

$is-columns: if($ezpz-grid-type == 'columns', true, false);
$is-fractions: if($ezpz-grid-type == 'fractions', true, false);
$total-cells: if($ezpz-grid-type == 'columns', $ezpz-columns, length($ezpz-fractions));

/* Cells
   ========================================================================== */

@mixin create-all-cells() {
	@if($is-columns or $is-fractions) {
		@include create-cells();

		// Create aditional classes for breakpoints
		@each $breakpoint, $size in $ezpz-breakpoints {
			@media (min-width: $size) {
				@include create-cells($breakpoint);
			}
		}
	}

	// Throw error when no, or an invalid grid type has been set.
	@else {
		@error 'Make sure to set $ezpz-grid-type to "columns" or "fractions"';
	}
}

@mixin create-cells($breakpoint: null) {
	$breakpoint: if($breakpoint, '--' + $breakpoint + '-', '--');

	@if($is-columns) {
		@for $i from 1 through $ezpz-columns {
			> .cell#{$breakpoint}#{$i} {
				@include create-cell($i);
			}
		}
	} @else {
		> .cell#{$breakpoint}1 {
			@include create-cell(1);
		}

		@each $fraction in $ezpz-fractions {
			@each $key, $val in $fraction {
				$modifier: $key + '\\/' + $val;

				> .cell#{$breakpoint}#{$modifier} {
					@include create-cell($key / $val);
				}
			}
		}
	}
}

// Accepts number input
//	- @include create-cell(3)
//	- @include create-cell(1/4)
@mixin create-cell($column: 1) {
	flex: 0 0 auto;

	@if (type-of($column) != number) {
		@error 'Please define a number variable.';
	}

	@if($is-columns) {
		width: (100% / $ezpz-columns) * $column;
	} @else if ($is-fractions) {
		@if ($column > 1) {
			@error 'Make sure you entered a valid fraction value. E.g. "1/2" or "3/4"';
		} @else {
			width: percentage($column);
		}
	}
}


// Alignment of all cells within a grid section
// ==========================================================================
@if $ezpz-grid-align {
	#{$ezpz-namespace}--align-start {
		align-items: flex-start;
	}

	#{$ezpz-namespace}--align-end {
		align-items: flex-end;
	}

	#{$ezpz-namespace}--align-center {
		align-items: center;
	}

	#{$ezpz-namespace}--align-stretch {
		align-items: stretch;
	}
}

// Grid section with automatically wrapping cells
// ==========================================================================
@if $ezpz-grid-wrap {
	#{$ezpz-namespace}--wrap {
		flex-wrap: wrap;

		> .cell {
			flex-basis: auto;
		}
	}

	#{$ezpz-namespace}--wrap-reverse {
		flex-wrap: wrap-reverse;

		> .cell {
			flex-basis: auto;
		}
	}
}


// Cell order (order is 0 by default)
// ==========================================================================
@if $ezpz-cell-order {
	#{$ezpz-namespace} {
		// Useful for pulling a single column to the front of the row
		> .cell--order-start {
			order: -1;
		}

		// Useful for pushing a single column to the end of the row
		> .cell--order-end {
			order: $total-cells;
		}

		// Create offset classes used to control cell order
		@for $i from 1 through $total-cells {
			> .cell--order-#{$i} {
				order: $i - 1;
			}
		}
	}
}


// Cell positioning through offset
// ========================================================================== */
@if $ezpz-cell-offset {
	#{$ezpz-namespace} {
		// Generate the offset classes for a column based grid
		@if($is-columns) {
			// Create basic offset classes
			// Used to offset individual cells
			@for $i from 1 through $ezpz-columns {
				> .cell--offset-#{$i} {
					margin-left: (100% / $ezpz-columns) * $i;
				}
			}
		}
		// Generate the offset classes for a fraction based grid
		@else if($is-fractions) {
			.cell--offset-0 {
				margin-left: 0;
			}

			.cell--offset-1 {
				margin-left: 100%;
			}

			@each $fraction in $ezpz-fractions {
				@each $key, $val in $fraction {
					$modifier: $key + '\\/' + $val;

					> .cell--offset-#{$modifier} {
						margin-left: percentage($key / $val);
					}
				}
			}
		}
		// Throw error when no, or an invalid grid type has been set.
		@else {
			@error 'Make sure to set $ezpz-grid-type to "columns" or "fractions"';
		}
	}
}


// Alignment of individual cells
// ==========================================================================
@if $ezpz-cell-align {
	#{$ezpz-namespace} {
		> .cell--align-start {
			align-self: flex-start;
		}

		> .cell--align-end {
			align-self: flex-end;
		}

		> .cell--align-center {
			align-self: center;
		}
	}
}

// Grid or cell without gutters
// ==========================================================================
@if $ezpz-gutter-collapse {
	// Specific cell without gutters
	#{$ezpz-namespace} {
		> .cell--collapsed {
			padding: 0;
		}
	}

	// Grid where none of the cells have gutters
	#{$ezpz-namespace}--collapsed {
		> .cell {
			padding: 0;
		}
	}
}


// Create breakpoint classes for all additional options
// ==========================================================================
@mixin create-breakpoint-classes() {
	@each $breakpoint, $size in $ezpz-breakpoints {
		@media (min-width: $size) {

			&--#{$breakpoint} {
				&-horizontal {
					flex-direction: row;
				}

				&-vertical {
					flex-direction: column;

					// IE Fix to prevent cells from not having a height in a vertical grid layout
					> .cell {
						flex-basis: auto;
					}
				}
			}

			@if $ezpz-grid-align {
				&--#{$breakpoint} {
					&-align-start {
						align-items: flex-start;
					}

					&-align-end {
						align-items: flex-end;
					}

					&-align-center {
						align-items: center;
					}

					&-align-stretch {
						align-items: stretch;
					}
				}
			}

			@if $ezpz-grid-wrap {
				&--#{$breakpoint}-nowrap {
					flex-wrap: nowrap;
				}
			}

			@if $ezpz-cell-order {
				& > .cell--#{$breakpoint}-order {
					&-start {
						order: -1;
					}

					&-end {
						order: $total-cells;
					}

					@for $i from 1 through $total-cells {
						&-#{$i} {
							order: $i - 1;
						}
					}
				}
			}

			@if $ezpz-cell-offset {
				@if($is-columns) {
					& > .cell--#{$breakpoint}-offset {
						&-0 {
							margin-left: 0;
						}

						@for $i from 1 through $ezpz-columns {
							&-#{$i} {
								margin-left: (100% / $ezpz-columns) * $i;
							}
						}
					}
				} @else if ($is-fractions) {
					& > .cell--#{$breakpoint}-offset {
						&-0 {
							margin-left: 0;
						}

						&-1 {
							margin-left: 100%;
						}

						@each $fraction in $ezpz-fractions {
							@each $key, $val in $fraction {
								$modifier: $key + '\\/' + $val;

								&-#{$modifier} {
									margin-left: percentage($key / $val);
								}
							}
						}
					}
				}
			}

			@if $ezpz-gutter-collapse {
				> .cell--#{$breakpoint} {
					&-collapsed {
						padding: 0;
					}

					&-expanded {
						padding: 0 ($ezpz-gutter / 2);
					}
				}

				&--#{$breakpoint} {
					&-collapsed {
						> .cell {
							padding: 0;
						}
					}

					&-expanded {
						> .cell {
							padding: 0 ($ezpz-gutter / 2);
						}
					}
				}
			}

			@if $ezpz-cell-align {
				> .cell--#{$breakpoint} {
					&-align-start {
						align-self: flex-start;
					}

					&-align-end {
						align-self: flex-end;
					}

					&-align-center {
						align-self: center;
					}

					&-align-stretch {
						align-self: stretch;
					}
				}
			}
		}
	}
}

/* Basic grid behaviour
   ========================================================================== */

#{$ezpz-namespace} {
	flex-direction: row;
	box-sizing: border-box;
	display: flex;

	margin-right: -($ezpz-gutter / 2);
	margin-left: -($ezpz-gutter / 2);

	> .cell {
		// Not using flex shorthand because IE 10/11 ignore shorthand declarations with a unitless flex-basis value
		// https://github.com/philipwalton/flexbugs#4-flex-shorthand-declarations-with-unitless-flex-basis-values-are-ignored
		flex-basis: 0%;
		flex-direction: column;
		flex-grow: 1;
		flex-shrink: 1;

		box-sizing: border-box;

		// Child items of a grid section also have display flex to allow same-height (stretched) modules within multiple cells
		display: flex;

		max-width: 100%;
		padding: 0 ($ezpz-gutter / 2);

		> * {
			// All direct child elements within a cell try to use up the maximum (and same) amount of available space
			flex-grow: 1;
		}
	}
}

// Cells are layed out vertically
#{$ezpz-namespace}--vertical {
	flex-direction: column;

	// IE 10/11 Fix to prevent cells from not having a height in a vertical grid layout
	> .cell {
		flex-basis: auto;
	}
}

#{$ezpz-namespace} {
	@include create-all-cells();
	@include create-breakpoint-classes();
}
