// ========================================================================== //
// EZPZ FLEXBOX GRID by Sven Sigmond - (VI Company) http://vicompany.nl
// ========================================================================== //

// Setup - Values may be edited - !!!DO NOT REMOVE THESE VARIABLES!!!
// ========================================================================== //

$ezpz-auto-generate:			true !default;

$ezpz-namespace:				'.grid' !default;
$ezpz-grid-type:				'columns' !default;  // 'columns' or 'fractions'
$ezpz-gutter: 					1rem !default;

// Only used when $ezpz-grid-type is set to 'columns'
$ezpz-columns: 					12 !default;

// Only used when $ezpz-grid-type is set to 'fractions'
$ezpz-fractions:				(1:2),
								(1:3),
								(2:3),
								(1:4),
								(3:4) !default;

// Breakpoints
// Please note that adding more breakpoints adds quite a lot of extra css depending on the optional features
$ezpz-breakpoints: 				(
									'tiny':		25rem,
									'small':	37.5rem,
									'medium':	60rem,
									'large':	90rem
								) !default;

// Optional grid features - Set to true to enable
$ezpz-grid-align:				false !default;
$ezpz-grid-wrap:				false !default;
$ezpz-cell-order:				false !default;
$ezpz-cell-offset:				false !default;
$ezpz-cell-align:				false !default;
$ezpz-gutter-collapse:			false !default;




// Grid generator - !!!DO NOT EDIT OR REMOVE ANTHING BELOW THIS LINE!!!
// ==========================================================================

$is-columns: if($ezpz-grid-type == 'columns', true, false);
$is-fractions: if($ezpz-grid-type == 'fractions', true, false);
$total-cells: if($ezpz-grid-type == 'columns', $ezpz-columns, length($ezpz-fractions));


// Utils
// ==========================================================================
@function format-breakpoint($breakpoint) {
	@return if($breakpoint, '--' + $breakpoint + '-', '--');
}

@function format-modifier($key, $val) {
	@return $key + '\\/' + $val;
}


// Cells
// ==========================================================================
@mixin create-all-cells() {
	@if($is-columns or $is-fractions) {
		@include create-cells();
	}
}

@mixin create-cells($breakpoint: null) {
	$breakpoint: format-breakpoint($breakpoint);

	@if($is-columns) {
		@for $i from 1 through $ezpz-columns {
			& > .cell#{$breakpoint}#{$i} {
				@include create-cell($i);
			}
		}
	} @else {
		& > .cell#{$breakpoint}1 {
			@include create-cell(1);
		}

		@each $fraction in $ezpz-fractions {
			@each $key, $val in $fraction {
				$modifier: format-modifier($key, $val);

				& > .cell#{$breakpoint}#{$modifier} {
					@include create-cell($key / $val);
				}
			}
		}
	}
}


// Accepts number input
//	- @include create-cell(3)
//	- @include create-cell(1/4)
@mixin create-cell($column: 1) {
	flex: 0 0 auto;

	@if (type-of($column) != number) {
		@error 'Please define a number variable.';
	}

	@if($is-columns) {
		width: (100% / $ezpz-columns) * $column;
	} @else if ($is-fractions) {
		@if ($column > 1) {
			@error 'Make sure you entered a valid fraction value. E.g. "1/2" or "3/4"';
		} @else {
			width: percentage($column);
		}
	}
}


// Alignment of all cells within a grid section
// ==========================================================================
@mixin grid-align-properties($breakpoint: null) {
	$breakpoint: format-breakpoint($breakpoint);

	@if $ezpz-grid-align {
		&#{$breakpoint}align-start {
			align-items: flex-start;
		}

		&#{$breakpoint}align-end {
			align-items: flex-end;
		}

		&#{$breakpoint}align-center {
			align-items: center;
		}

		&#{$breakpoint}align-stretch {
			align-items: stretch;
		}
	}
}


// Grid section with automatically wrapping cells
// ==========================================================================
@mixin grid-wrap-properties($breakpoint: null) {
	$breakpoint: format-breakpoint($breakpoint);

	@if $ezpz-grid-wrap {
		@if $breakpoint {
			&--#{$breakpoint}-nowrap {
				flex-wrap: nowrap;
			}
		} @else {
			&--wrap {
				flex-wrap: wrap;

				> .cell {
					flex-basis: auto;
				}
			}

			&--wrap-reverse {
				flex-wrap: wrap-reverse;

				> .cell {
					flex-basis: auto;
				}
			}
		}
	}
}


// Cell order (order is 0 by default)
// ==========================================================================
@mixin cell-order-properties($breakpoint: null) {
	$breakpoint: format-breakpoint($breakpoint);

	@if $ezpz-cell-order {
		& > .cell#{$breakpoint}order {
			// Useful for pulling a single column to the front of the row
			&-start {
				order: -1;
			}

			// Useful for pushing a single column to the end of the row
			&-end {
				order: $total-cells;
			}

			// Create offset classes used to control cell order
			@for $i from 1 through $total-cells {
				&-#{$i} {
					order: $i - 1;
				}
			}
		}
	}
}


// Cell positioning through offset
// ========================================================================== */
@mixin cell-offset-properties($breakpoint: null) {
	$breakpoint: format-breakpoint($breakpoint);

	@if $ezpz-cell-offset {
		// Generate the offset classes for a column based grid
		@if($is-columns) {
			& > .cell#{$breakpoint}offset {
				&-0 {
					margin-left: 0;
				}

				@for $i from 1 through $ezpz-columns {
					&-#{$i} {
						margin-left: (100% / $ezpz-columns) * $i;
					}
				}
			}
		}
		// Generate the offset classes for a fraction based grid
		@else if($is-fractions) {
			.cell#{$breakpoint}offset-0 {
				margin-left: 0;
			}

			.cell#{$breakpoint}offset-1 {
				margin-left: 100%;
			}

			@each $fraction in $ezpz-fractions {
				@each $key, $val in $fraction {
					$modifier: format-modifier($key, $val);

					> .cell#{$breakpoint}offset-#{$modifier} {
						margin-left: percentage($key / $val);
					}
				}
			}
		}
	}
}


// Alignment of individual cells
// ==========================================================================
@mixin cell-align-properties($breakpoint: null) {
	$breakpoint: format-breakpoint($breakpoint);

	@if $ezpz-cell-align {
		& > .cell#{$breakpoint}align {
			&-start {
				align-self: flex-start;
			}

			&-end {
				align-self: flex-end;
			}

			&-center {
				align-self: center;
			}

			&-stretch {
				align-self: stretch;
			}
		}
	}
}


// Grid or cell without gutters
// ==========================================================================
@mixin gutter-collapse-properties($breakpoint: null) {
	$breakpoint: format-breakpoint($breakpoint);

	@if $ezpz-gutter-collapse {
		// Specific cell without gutters
		& > .cell {
			&#{$breakpoint}collapsed {
				padding: 0;
			}

			&#{$breakpoint}expanded {
				padding: 0 ($ezpz-gutter / 2);
			}
		}

		// Grid where none of the cells have gutters
		&#{$breakpoint}collapsed {
			> .cell {
				padding: 0;
			}
		}

		&#{$breakpoint}expanded {
			> .cell {
				padding: 0 ($ezpz-gutter / 2);
			}
		}
	}
}


// Create responsive classes for all additional options
// ==========================================================================
@mixin create-responsive-classes() {
	@each $breakpoint, $size in $ezpz-breakpoints {
		@media (min-width: $size) {
			// Base
			@include create-cells($breakpoint);
			@include grid-layout-properties($breakpoint);

			// Optional
			@include grid-align-properties($breakpoint);
			@include grid-wrap-properties($breakpoint);
			@include cell-order-properties($breakpoint);
			@include cell-offset-properties($breakpoint);
			@include gutter-collapse-properties($breakpoint);
			@include cell-align-properties($breakpoint);
		}
	}
}


// Base
// ==========================================================================
@mixin create-grid() {
	flex-direction: row;
	box-sizing: border-box;
	display: flex;

	margin-right: -($ezpz-gutter / 2);
	margin-left: -($ezpz-gutter / 2);
}

@mixin create-grid-cell() {
	// Not using flex shorthand because IE 10/11 ignore shorthand declarations with a unitless flex-basis value
	// https://github.com/philipwalton/flexbugs#4-flex-shorthand-declarations-with-unitless-flex-basis-values-are-ignored
	flex-basis: 0%;
	flex-direction: column;
	flex-grow: 1;
	flex-shrink: 1;

	box-sizing: border-box;

	// Child items of a grid section also have display flex to allow same-height (stretched) modules within multiple cells
	display: flex;

	max-width: 100%;
	padding: 0 ($ezpz-gutter / 2);

	> * {
		// All direct child elements within a cell try to use up the maximum (and same) amount of available space
		flex-grow: 1;
	}
}

@mixin create-full-grid() {
	@include create-grid();

	> .cell {
		@include create-grid-cell();
	}
}

@mixin grid-layout-properties($breakpoint: null) {
	$breakpoint: format-breakpoint($breakpoint);

	&#{$breakpoint} {
		&horizontal {
			flex-direction: row;
		}

		&vertical {
			flex-direction: column;

			// IE Fix to prevent cells from not having a height in a vertical grid layout
			> .cell {
				flex-basis: auto;
			}
		}
	}
}


// Generate all the things
// ==========================================================================
@if ($ezpz-auto-generate) {
	#{$ezpz-namespace} {
		@include create-full-grid();
		@include grid-layout-properties();
		@include create-all-cells();

		// Optional
		@include grid-align-properties();
		@include grid-wrap-properties();
		@include cell-order-properties();
		@include cell-offset-properties();
		@include gutter-collapse-properties();
		@include cell-align-properties();

		// Responsive classes
		@include create-responsive-classes();
	}
}
